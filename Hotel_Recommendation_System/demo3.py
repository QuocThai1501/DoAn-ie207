# ch·∫°y b·∫±ng l·ªánh: streamlit run demo2.py  
import pandas as pd
import streamlit as st
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
import time
from hotel_recommender import HotelRecommenderBERT

#---------------------------------------------------------------------------------------------------------------------#
# ƒê·ªçc d·ªØ li·ªáu du kh√°ch v√† kh√°ch s·∫°n t·ª´ file CSV.
new_hotels = pd.read_csv('../hotels_data_final.csv')
#new_tourists = pd.read_csv('../tourist_dataset_10k.csv')

# class khuy·∫øn ngh·ªã
recommender = HotelRecommenderBERT(new_hotels)
#---------------------------------------------------------------------------------------------------------------------#
# Danh s√°ch c√°c t·ªânh/th√†nh ph·ªë
locations = [
    "An Giang", "B√† R·ªãa - V≈©ng T√†u", "B·∫°c Li√™u", "B·∫Øc Giang", "B·∫Øc K·∫°n", "B·∫Øc Ninh",
    "B·∫øn Tre", "B√¨nh D∆∞∆°ng", "B√¨nh ƒê·ªãnh", "B√¨nh Ph∆∞·ªõc", "B√¨nh Thu·∫≠n", "C√† Mau",
    "Cao B·∫±ng", "C·∫ßn Th∆°", "ƒê√† N·∫µng", "ƒê·∫Øk L·∫Øk", "ƒê·∫Øk N√¥ng", "ƒêi·ªán Bi√™n", "ƒê·ªìng Nai",
    "ƒê·ªìng Th√°p", "Gia Lai", "H√† Giang", "H√† Nam", "H√† N·ªôi", "H√† Tƒ©nh", "H·∫£i D∆∞∆°ng",
    "H·∫£i Ph√≤ng", "H·∫≠u Giang", "H√≤a B√¨nh", "H∆∞ng Y√™n", "Kh√°nh H√≤a", "Ki√™n Giang",
    "Kon Tum", "Lai Ch√¢u", "L√¢m ƒê·ªìng", "L·∫°ng S∆°n", "L√†o Cai", "Long An", "Nam ƒê·ªãnh",
    "Ngh·ªá An", "Ninh B√¨nh", "Ninh Thu·∫≠n", "Ph√∫ Th·ªç", "Ph√∫ Y√™n", "Qu·∫£ng B√¨nh",
    "Qu·∫£ng Nam", "Qu·∫£ng Ng√£i", "Qu·∫£ng Ninh", "Qu·∫£ng Tr·ªã", "S√≥c TrƒÉng", "S∆°n La",
    "T√¢y Ninh", "Th√°i B√¨nh", "Th√°i Nguy√™n", "Thanh H√≥a", "Th·ª´a Thi√™n Hu·∫ø", "Ti·ªÅn Giang",
    "TP. H·ªì Ch√≠ Minh", "Tr√† Vinh", "Tuy√™n Quang", "Vƒ©nh Long", "Vƒ©nh Ph√∫c", "Y√™n B√°i"
]
#---------------------------------------------------------------------------------------------------------------------#
# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Advanced Hotel Recommendation System",
    page_icon="üè®",
    layout="wide"
)

# Sidebar - Nh·∫≠p th√¥ng tin
with st.sidebar:
    st.header("üîç Search Criteria")
    with st.form("search_form"):
        # Th√¥ng tin c∆° b·∫£n
        st.subheader("Basic Information")
        selected_location = st.selectbox("Location", locations, index=locations.index("H·ªì Ch√≠ Minh") if "H·ªì Ch√≠ Minh" in locations else 0)
        
        # Budget range
        st.subheader("Budget Range (VND)")
        min_budget, max_budget = st.slider(
            "Select your budget range",
            0, 20000000, (0, 20000000),
            step=100000,
            format="%d VND"
        )
        
        # Time preferences
        st.subheader("Check-in/out Time Preferences")
        checkin_start, checkin_end = st.slider(
            "Preferred check-in time",
            0, 24, (0, 24),
            step=1,
            format="%02d:00"
        )
        
        checkout_start, checkout_end = st.slider(
            "Preferred check-out time",
            0, 24, (0, 24),
            step=1,
            format="%02d:00"
        )
        
        # Input text
        st.subheader("Additional Preferences")
        special_requests = st.text_area("Special requests", placeholder="T√¥i c·∫ßn t√¨m kh√°ch s·∫°n g·∫ßn bi·ªÉn, ƒëi·ªÉm ƒë√°nh gi√° kho·∫£ng 8.0")
        submitted = st.form_submit_button("Find Hotels")
        
        if submitted:
            st.session_state.search_params = {
                'location': selected_location,
                'min_budget': min_budget,
                'max_budget': max_budget,
                'checkin_range': (checkin_start, checkin_end),
                'checkout_range': (checkout_start, checkout_end),
                'special_requests': special_requests
            }
            # Xo√° c√°c k·∫øt qu·∫£ hi·ªÉn th·ªã c≈© n·∫øu c√≥
            for key in ['recommendations', 'show_count', 'other_show_count']:
                if key in st.session_state:
                    del st.session_state[key]

            # G·ªçi rerun ƒë·ªÉ l√†m m·ªõi giao di·ªán
            st.rerun()
            st.success("Search criteria saved!")

# Main content
st.title("üè® Advanced Hotel Recommendation System")
st.write("Find hotels that match your exact preferences")

if 'search_params' in st.session_state:
    params = st.session_state.search_params
    
    # Hi·ªÉn th·ªã ti√™u ch√≠ t√¨m ki·∫øm
    with st.expander("üîç Your Search Criteria", expanded=True):
        # D√≤ng 1: Location + Budget
        cols1 = st.columns(2)
        cols1[0].metric("Location", params['location'])
        cols1[1].metric("Budget", f"{params['min_budget']:,} - {params['max_budget']:,} VND")

        # Chu·∫©n b·ªã text cho check-in / check-out
        checkin_text = f"{params['checkin_range'][0]}:00 - {params['checkin_range'][1]}:00"
        checkout_text = f"{params['checkout_range'][0]}:00 - {params['checkout_range'][1]}:00"

        # Chu·∫©n b·ªã text cho requests
        special_requests_text = params['special_requests'] if params['special_requests'] else "Kh√¥ng c√≥"

        # D√≤ng 2: Facilities + Check-in
        cols2 = st.columns(2)
        cols2[0].markdown(f"**Special Requests:** {special_requests_text}")
        cols2[1].markdown(f"**Check-in Range:** {checkin_text}")

        # D√≤ng 3: Special Requests + Check-out
        cols3 = st.columns(2)
        cols3[1].markdown(f"**Check-out Range:** {checkout_text}")

    
    # T√¨m ki·∫øm kh√°ch s·∫°n
    if st.button("üîç Search Hotels", use_container_width=True):
        with st.spinner(f"Finding best hotels in {params['location']}..."):
            time.sleep(0.5)
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
            facilities_input = params['special_requests']
                
            # G·ªçi h√†m g·ª£i √Ω
            recommendations = recommender.get_recommendations_bert(
                input_text=facilities_input,
                location=params['location'],
                checkin_range=params['checkin_range'],
                checkout_range=params['checkout_range'],
                min_budget=params['min_budget'],
                max_budget=params['max_budget'],
            )
            
            st.session_state.recommendations = recommendations
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    if 'recommendations' in st.session_state:
        st.subheader("üèÜ Matching Hotels")
        if not st.session_state.recommendations.empty:
            st.success(f"Found {len(st.session_state.recommendations)} matching hotels")
            # Initialize session state for pagination if not exists
            if 'show_count' not in st.session_state:
                st.session_state.show_count = 5  # Show first 5 hotels initially
                
            # Display hotels up to the current show_count
            df = st.session_state.recommendations.iloc[:st.session_state.show_count]
            
            for idx, hotel in df.iterrows():
                with st.container():
                    st.markdown(f"### [{hotel['Hotel Name']}]({hotel['Hotel URL']})")
                    st.markdown(f"üìç **{hotel['Address']}**")
                    
                    # Hi·ªÉn th·ªã rating
                    rating = hotel['Overall Rating']
                    stars = "‚≠ê" * int(round(rating))
                    st.markdown(f"{stars} **{rating:.1f}/10**")
                    
                    # Gi√° v√† th·ªùi gian
                    cols2 = st.columns(3)
                    cols2[0].metric("Price", hotel['Overview Price'])
                    cols2[1].metric("Check-in", hotel['Checkin Time'])
                    cols2[2].metric("Check-out", hotel['Checkout Time'])
                    
                    # Facilities
                    with st.expander("Facilities & Details"):
                        st.markdown(f"**Popular Facilities:** {hotel['Popular Facilities']}")
                        st.markdown("**Ratings Breakdown:**")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown(f"""
                            - Staff: {hotel['Staff']}
                            - Facilities: {hotel['Facilities']}
                            - Cleanliness: {hotel['Cleanliness']}
                            - Comfort: {hotel['Comfort']}
                            """)
                        with col2:
                            st.markdown(f"""
                            - Value for Money: {hotel['Value for Money']}
                            - Location: {hotel['Location']}
                            - Free Wifi: {hotel['Free Wifi']}
                            """)
                    
                    st.markdown("---")
            
            # Show "Load More" button if there are more hotels to display
            if len(st.session_state.recommendations) > st.session_state.show_count:
                if st.button("Load More Hotels"):
                    st.session_state.show_count += 5  # Increase by 5 each time
                    st.rerun()
        else:
            st.warning("No hotels found matching all your criteria. Please try adjusting your search parameters.")   
            
        st.markdown("---")
        st.subheader("üè° Other Hotels in the Area")
        other_hotels = recommender.get_other_hotels(st.session_state.recommendations, params['location'])
        if not other_hotels.empty:
            st.success(f"Found {len(other_hotels)} other hotels in {params['location']}")
            
            # Initialize session state for other hotels pagination
            if 'other_show_count' not in st.session_state:
                st.session_state.other_show_count = 5  
                
            # Display other hotels up to current show_count
            other_df = other_hotels.iloc[:st.session_state.other_show_count]
            
            for idx, hotel in other_df.iterrows():
                with st.container():
                    st.markdown(f"### [{hotel['Hotel Name']}]({hotel['Hotel URL']})")
                    st.markdown(f"üìç **{hotel['Address']}**")
                    
                    rating = hotel['Overall Rating']
                    stars = "‚≠ê" * int(round(rating))
                    st.markdown(f"{stars} **{rating:.1f}/10**")
                    
                    st.markdown(f"**üí∞ Price:** {hotel['Overview Price']}")
                    st.markdown(f"**üè® Check-in Time:** {hotel['Checkin Time']}")
                    st.markdown(f"**üè® Check-out Time:** {hotel['Checkout Time']}")
                    
                    with st.expander("View Facilities"):
                        st.markdown(f"**Facilities:** {hotel['Popular Facilities']}")
                        st.markdown("**Ratings Breakdown:**")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.markdown(f"""
                            - Staff: {hotel['Staff']}
                            - Facilities: {hotel['Facilities']}
                            - Cleanliness: {hotel['Cleanliness']}
                            - Comfort: {hotel['Comfort']}
                            """)
                        with col2:
                            st.markdown(f"""
                            - Value for Money: {hotel['Value for Money']}
                            - Location: {hotel['Location']}
                            - Free Wifi: {hotel['Free Wifi']}
                            """)
                    
                    st.markdown("---")
            
            # Show "Load More" button for other hotels if there are more
            if len(other_hotels) > st.session_state.other_show_count:
                if st.button("Load More Other Hotels"):
                    st.session_state.other_show_count += 5  
                    st.rerun()
        else:
            st.warning(f"No other hotels found in {params['location']}")
        
else:
    st.info("Please set your search criteria in the sidebar to find matching hotels")

# Footer
st.markdown("---")
st.markdown("¬© 2025 Hotel Recommendation System | Quoc Thai - Khanh Ngan | IE207")
